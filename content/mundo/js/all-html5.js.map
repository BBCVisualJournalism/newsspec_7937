{"version":3,"file":"all-html5.js","sources":["lib/vendors/jquery/jquery-2.0.3.js","lib/news_special/iframemanager__frame.js","lib/news_special/imager.js","lib/news_special/imager_image_sizes.js","lib/vendors/jquery/pubsub.js","lib/news_special/bootstrap.js","lib/vendors/require/text.js","../data/map_data.json!text","dogs_rollover.js","dogs_map.js","app.js"],"names":[],"mappings":"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","sourcesContent":["/*! jQuery v2.0.3 -sizzle,-wrap,-event-alias,-ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions,-deprecated | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map\n*/\n(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,c=e.$,u={},l=[],p=\"2.0.3 -sizzle,-wrap,-event-alias,-ajax,-ajax/script,-ajax/jsonp,-ajax/xhr,-effects,-offset,-dimensions,-deprecated\",f=l.concat,h=l.push,d=l.slice,g=l.indexOf,m=u.toString,y=u.hasOwnProperty,v=p.trim,b=function(e,n){return new b.fn.init(e,n,t)},x=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,k=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,T=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,C=/^-ms-/,N=/-([\\da-z])/gi,D=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener(\"DOMContentLoaded\",S,!1),e.removeEventListener(\"load\",S,!1),b.ready()};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,t,n){var r,i;if(!e)return this;if(\"string\"==typeof e){if(r=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:k.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),T.test(r[1])&&b.isPlainObject(t))for(r in t)b.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for(\"boolean\"==typeof s&&(u=s,s=arguments[1]||{},a=2),\"object\"==typeof s||b.isFunction(s)||(s={}),c===a&&(s=this,--a);c>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(u&&r&&(b.isPlainObject(r)||(i=b.isArray(r)))?(i?(i=!1,o=n&&b.isArray(n)?n:[]):o=n&&b.isPlainObject(n)?n:{},s[t]=b.extend(u,o,r)):r!==undefined&&(s[t]=r));return s},b.extend({expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===b&&(e.$=c),t&&e.jQuery===b&&(e.jQuery=a),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){(e===!0?--b.readyWait:b.isReady)||(b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger(\"ready\").off(\"ready\")))},isFunction:function(e){return\"function\"===b.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?u[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(\"object\"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=T.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,\"text/xml\")}catch(r){t=undefined}return(!t||t.getElementsByTagName(\"parsererror\").length)&&b.error(\"Invalid XML: \"+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=b.trim(e),e&&(1===e.indexOf(\"use strict\")?(t=o.createElement(\"script\"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(C,\"ms-\").replace(N,D)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=A(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?\"\":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(A(Object(e))?b.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if(\"number\"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=A(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return\"string\"==typeof t&&(n=e[t],t=e,e=n),b.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,c=e.length,u=null==n;if(\"object\"===b.type(n)){i=!0;for(a in n)b.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,b.isFunction(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(b(e),n)})),t))for(;c>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):c?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),b.ready.promise=function(t){return n||(n=b.Deferred(),\"complete\"===o.readyState?setTimeout(b.ready):(o.addEventListener(\"DOMContentLoaded\",S,!1),e.addEventListener(\"load\",S,!1))),n.promise(t)},b.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){u[\"[object \"+t+\"]\"]=t.toLowerCase()});function A(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}t=b(o);var E,j=s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector,H=function(e,t){if(e===t)return E=!0,0;var n=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t);return n?1&n?e===o||b.contains(o,e)?-1:t===o||b.contains(o,t)?1:0:4&n?-1:1:e.compareDocumentPosition?-1:1};b.extend({find:function(e,t,n,r){var i,s,a=0;if(n=n||[],t=t||o,!e||\"string\"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(r)while(i=r[a++])b.find.matchesSelector(i,e)&&n.push(i);else b.merge(n,t.querySelectorAll(e));return n},unique:function(e){var t,n=[],r=0,i=0;if(E=!1,e.sort(H),E){while(t=e[r++])t===e[r]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e},text:function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i)return e.textContent;if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=b.text(t);return n},contains:function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!n.contains(r))},isXMLDoc:function(e){return\"HTML\"!==(e.ownerDocument||e).documentElement.nodeName},expr:{attrHandle:{},match:{bool:/^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,needsContext:/^[\\x20\\t\\r\\n\\f]*[>+~]/}}}),b.extend(b.find,{matches:function(e,t){return b.find(e,null,null,t)},matchesSelector:function(e,t){return j.call(e,t)},attr:function(e,t){return e.getAttribute(t)}});var O={};function P(e){var t=O[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e=\"string\"==typeof e?O[e]||P(e):b.extend({},e);var t,n,r,i,o,s,a=[],c=!e.once&&[],u=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(c?c.length&&u(c.shift()):t?a=[]:l.disable())},l={add:function(){if(a){var n=a.length;(function s(t){b.each(t,function(t,n){var r=b.type(n);\"function\"===r?e.unique&&l.has(n)||a.push(n):n&&n.length&&\"string\"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,u(t))}return this},remove:function(){return a&&b.each(arguments,function(e,t){var n;while((n=b.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?b.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=c=t=undefined,this},disabled:function(){return!a},lock:function(){return c=undefined,t||l.disable(),this},locked:function(){return!c},fireWith:function(e,t){return!a||n&&!c||(t=t||[],t=[e,t.slice?t.slice():t],r?c.push(t):u(t)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!n}};return l},b.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",b.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",b.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",b.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var s=o[0],a=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+\"With\"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,c,u;if(r>1)for(a=Array(r),c=Array(r),u=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(s(t,u,n)).fail(o.reject).progress(s(t,c,a)):--i;return i||o.resolveWith(u,n),o.promise()}}),b.support=function(t){var n=o.createElement(\"input\"),r=o.createDocumentFragment(),i=o.createElement(\"div\"),s=o.createElement(\"select\"),a=s.appendChild(o.createElement(\"option\"));return n.type?(n.type=\"checkbox\",t.checkOn=\"\"!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement(\"input\"),n.value=\"t\",n.type=\"radio\",t.radioValue=\"t\"===n.value,n.setAttribute(\"checked\",\"t\"),n.setAttribute(\"name\",\"t\"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles=\"onfocusin\"in e,i.style.backgroundClip=\"content-box\",i.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===i.style.backgroundClip,b(function(){var n,r,s=\"padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box\",a=o.getElementsByTagName(\"body\")[0];a&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",a.appendChild(n).appendChild(i),i.innerHTML=\"\",i.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%\",b.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(i,null)||{width:\"4px\"}).width,r=i.appendChild(o.createElement(\"div\")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width=\"0\",i.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,W,F=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,q=/([A-Z])/g;function M(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=b.expando+Math.random()}M.uid=1,M.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},M.prototype={key:function(e){if(!M.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=M.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,b.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if(\"string\"==typeof t)o[t]=n;else if(b.isEmptyObject(o))b.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&\"string\"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,b.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{b.isArray(t)?r=t.concat(t.map(b.camelCase)):(i=b.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!b.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new M,W=new M,b.extend({acceptData:M.accepts,hasData:function(e){return L.hasData(e)||W.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return W.access(e,t,n)},_removeData:function(e,t){W.remove(e,t)}}),b.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!W.get(i,\"hasDataAttrs\"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf(\"data-\")&&(r=b.camelCase(r.slice(5)),z(i,r,s[r]));W.set(i,\"hasDataAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){L.set(this,e)}):b.access(this,function(t){var n,r=b.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=z(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf(\"-\")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function z(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r=\"data-\"+t.replace(q,\"-$1\").toLowerCase(),n=e.getAttribute(r),\"string\"==typeof n){try{n=\"true\"===n?!0:\"false\"===n?!1:\"null\"===n?null:+n+\"\"===n?+n:F.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}b.extend({queue:function(e,t,n){var r;return e?(t=(t||\"fx\")+\"queue\",r=W.get(e,t),n&&(!r||b.isArray(n)?r=W.access(e,t,b.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||\"fx\";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),s=function(){b.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return W.get(e,n)||W.access(e,n,{empty:b.Callbacks(\"once memory\").add(function(){W.remove(e,[t+\"queue\",n])})})}}),b.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),n>arguments.length?b.queue(this[0],e):t===undefined?this:this.each(function(){var n=b.queue(this,e,t);b._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==n[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=b.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=undefined),e=e||\"fx\";while(s--)n=W.get(o[s],e+\"queueHooks\"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var $,R,_=/[\\t\\r\\n\\f]/g,B=/\\r/g,I=/^(?:input|select|textarea|button)$/i;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[b.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,c=\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(c)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(_,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,c=0===arguments.length||\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(c)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(_,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?b.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e;return\"boolean\"==typeof t&&\"string\"===n?t?this.addClass(e):this.removeClass(e):b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var t,i=0,o=b(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||\"boolean\"===n)&&(this.className&&W.set(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":W.get(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(_,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=b.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,b(this).val()):e,null==i?i=\"\":\"number\"==typeof i?i+=\"\":b.isArray(i)&&(i=b.map(i,function(e){return null==e?\"\":e+\"\"})),t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],t&&\"set\"in t&&t.set(this,i,\"value\")!==undefined||(this.value=i))});if(i)return t=b.valHooks[i.type]||b.valHooks[i.nodeName.toLowerCase()],t&&\"get\"in t&&(n=t.get(i,\"value\"))!==undefined?n:(n=i.value,\"string\"==typeof n?n.replace(B,\"\"):null==n?\"\":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,c=0>i?a:o?i:0;for(;a>c;c++)if(n=r[c],!(!n.selected&&c!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&b.nodeName(n.parentNode,\"optgroup\"))){if(t=b(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=b.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=b.inArray(b(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?b.prop(e,t,n):(1===s&&b.isXMLDoc(e)||(t=t.toLowerCase(),i=b.attrHooks[t]||(b.expr.match.bool.test(t)?R:$)),n===undefined?i&&\"get\"in i&&null!==(o=i.get(e,t))?o:(o=b.find.attr(e,t),null==o?undefined:o):null!==n?i&&\"set\"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+\"\"),n):(b.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,b.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&\"radio\"===t&&b.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!b.isXMLDoc(e),o&&(t=b.propFix[t]||t,i=b.propHooks[t]),n!==undefined?i&&\"set\"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute(\"tabindex\")||I.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),R={set:function(e,t,n){return t===!1?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\\w+/g),function(e,t){var n=b.expr.attrHandle[t]||b.find.attr;b.expr.attrHandle[t]=function(e,t,r){var i=b.expr.attrHandle[t],o=r?undefined:(b.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return b.expr.attrHandle[t]=i,o}}),b.support.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),b.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){b.propFix[this.toLowerCase()]=this}),b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]={set:function(e,t){return b.isArray(t)?e.checked=b.inArray(b(e).val(),t)>=0:undefined}},b.support.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})});var X=/^key/,U=/^(?:mouse|contextmenu)|click/,V=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\\.(.+)|)$/;function Q(){return!0}function K(){return!1}function J(){try{return o.activeElement}catch(e){}}b.event={global:{},add:function(e,t,n,i,o){var s,a,c,u,l,p,f,h,d,g,m,y=W.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=b.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof b===r||e&&b.event.triggered===e.type?undefined:b.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)c=Y.exec(t[l])||[],d=m=c[1],g=(c[2]||\"\").split(\".\").sort(),d&&(f=b.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=b.event.special[d]||{},p=b.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&b.expr.match.needsContext.test(o),namespace:g.join(\".\")},s),(h=u[d])||(h=u[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),b.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,c,u,l,p,f,h,d,g,m=W.hasData(e)&&W.get(e);if(m&&(c=m.events)){t=(t||\"\").match(w)||[\"\"],u=t.length;while(u--)if(a=Y.exec(t[u])||[],h=g=a[1],d=(a[2]||\"\").split(\".\").sort(),h){p=b.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=c[h]||[],a=a[2]&&RegExp(\"(^|\\\\.)\"+d.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),s=o=f.length;while(o--)l=f[o],!i&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&(\"**\"!==r||!l.selector)||(f.splice(o,1),l.selector&&f.delegateCount--,p.remove&&p.remove.call(e,l));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||b.removeEvent(e,h,m.handle),delete c[h])}else for(h in c)b.event.remove(e,h+t[u],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,W.remove(e,\"events\"))}},trigger:function(t,n,r,i){var s,a,c,u,l,p,f,h=[r||o],d=y.call(t,\"type\")?t.type:t,g=y.call(t,\"namespace\")?t.namespace.split(\".\"):[];if(a=c=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!V.test(d+b.event.triggered)&&(d.indexOf(\".\")>=0&&(g=d.split(\".\"),d=g.shift(),g.sort()),l=0>d.indexOf(\":\")&&\"on\"+d,t=t[b.expando]?t:new b.Event(d,\"object\"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join(\".\"),t.namespace_re=t.namespace?RegExp(\"(^|\\\\.)\"+g.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:b.makeArray(n,[t]),f=b.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!b.isWindow(r)){for(u=f.delegateType||d,V.test(u+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),c=a;c===(r.ownerDocument||o)&&h.push(c.defaultView||c.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?u:f.bindType||d,p=(W.get(a,\"events\")||{})[t.type]&&W.get(a,\"handle\"),p&&p.apply(a,n),p=l&&a[l],p&&b.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!b.acceptData(r)||l&&b.isFunction(r[d])&&!b.isWindow(r)&&(c=r[l],c&&(r[l]=null),b.event.triggered=d,r[d](),b.event.triggered=undefined,c&&(r[l]=c)),t.result}},dispatch:function(e){e=b.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),c=(W.get(this,\"events\")||{})[e.type]||[],u=b.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,c),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((b.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,c=e.target;if(a&&c.nodeType&&(!e.button||\"click\"!==e.type))for(;c!==this;c=c.parentNode||this)if(c.disabled!==!0||\"click\"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+\" \",r[i]===undefined&&(r[i]=o.needsContext?b(i,this).index(c)>=0:b.find(i,this,null,[c]).length),r[i]&&r.push(o);r.length&&s.push({elem:c,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=U.test(i)?this.mouseHooks:X.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new b.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==J()&&this.focus?(this.focus(),!1):undefined},delegateType:\"focusin\"},blur:{trigger:function(){return this===J()&&this.blur?(this.blur(),!1):undefined},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&b.nodeName(this,\"input\")?(this.click(),!1):undefined},_default:function(e){return b.nodeName(e.target,\"a\")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},b.Event=function(e,t){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?Q:K):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,undefined):new b.Event(e,t)},b.Event.prototype={isDefaultPrevented:K,isPropagationStopped:K,isImmediatePropagationStopped:K,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Q,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Q,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=Q,this.stopPropagation()}},b.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.focusinBubbles||b.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,t,n,r,i){var o,s;if(\"object\"==typeof e){\"string\"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&(\"string\"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=K;else if(!r)return this;return 1===i&&(o=r,r=function(e){return b().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=b.guid++)),this.each(function(){b.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,b(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||\"function\"==typeof t)&&(n=t,t=undefined),n===!1&&(n=K),this.each(function(){b.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?b.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\\[\\.,]*$/,Z=/^(?:parents|prev(?:Until|All))/,et=b.expr.match.needsContext,tt={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if(\"string\"!=typeof e)return this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(t=0;i>t;t++)b.find(e,r[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=this.selector?this.selector+\" \"+e:e,n},has:function(e){var t=b(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(b.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(rt(this,e||[],!0))},filter:function(e){return this.pushStack(rt(this,e||[],!1))},is:function(e){return!!rt(this,\"string\"==typeof e&&et.test(e)?b(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=et.test(e)||\"string\"!=typeof e?b(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?\"string\"==typeof e?g.call(b(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function nt(e,t){while((e=e[t])&&1!==e.nodeType);return e\n}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return b.dir(e,\"parentNode\",n)},next:function(e){return nt(e,\"nextSibling\")},prev:function(e){return nt(e,\"previousSibling\")},nextAll:function(e){return b.dir(e,\"nextSibling\")},prevAll:function(e){return b.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return b.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return b.dir(e,\"previousSibling\",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return e.contentDocument||b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return\"Until\"!==e.slice(-5)&&(r=n),r&&\"string\"==typeof r&&(i=b.filter(r,i)),this.length>1&&(tt[e]||b.unique(i),Z.test(e)&&i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?b.find.matchesSelector(r,e)?[r]:[]:b.find.matches(e,b.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&b(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function rt(e,t,n){if(b.isFunction(t))return b.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return b.grep(e,function(e){return e===t!==n});if(\"string\"==typeof t){if(G.test(t))return b.filter(t,e,n);t=b.filter(t,e)}return b.grep(e,function(e){return g.call(t,e)>=0!==n})}var it=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,ot=/<([\\w:]+)/,st=/<|&#?\\w+;/,at=/<(?:script|style|link)/i,ct=/^(?:checkbox|radio)$/i,ut=/checked\\s*(?:[^=]|=\\s*.checked.)/i,lt=/^$|\\/(?:java|ecma)script/i,pt=/^true\\/(.*)/,ft=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,ht={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};ht.optgroup=ht.option,ht.tbody=ht.tfoot=ht.colgroup=ht.caption=ht.thead,ht.th=ht.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===undefined?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=dt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=dt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?b.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||b.cleanData(bt(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&yt(bt(n,\"script\")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(bt(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!at.test(e)&&!ht[(ot.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=e.replace(it,\"<$1></$2>\");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(b.cleanData(bt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=b.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),b(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,c,u=0,l=this.length,p=this,h=l-1,d=e[0],g=b.isFunction(d);if(g||!(1>=l||\"string\"!=typeof d||b.support.checkClone)&&ut.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(l&&(r=b.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=b.map(bt(r,\"script\"),gt),s=o.length;l>u;u++)a=r,u!==h&&(a=b.clone(a,!0,!0),s&&b.merge(o,bt(a,\"script\"))),t.call(this[u],a,u);if(s)for(c=o[o.length-1].ownerDocument,b.map(o,mt),u=0;s>u;u++)a=o[u],lt.test(a.type||\"\")&&!W.access(a,\"globalEval\")&&b.contains(c,a)&&(a.src?b._evalUrl(a.src):b.globalEval(a.textContent.replace(ft,\"\")))}return this}}),b.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){b.fn[e]=function(e){var n,r=[],i=b(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),b(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),b.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),c=b.contains(e.ownerDocument,e);if(!(b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(s=bt(a),o=bt(e),r=0,i=o.length;i>r;r++)xt(o[r],s[r]);if(t)if(n)for(o=o||bt(e),s=s||bt(a),r=0,i=o.length;i>r;r++)vt(o[r],s[r]);else vt(e,a);return s=bt(a,\"script\"),s.length>0&&yt(s,!c&&bt(e,\"script\")),a},buildFragment:function(e,t,n,r){var i,o,s,a,c,u,l=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>l;l++)if(i=e[l],i||0===i)if(\"object\"===b.type(i))b.merge(h,i.nodeType?[i]:i);else if(st.test(i)){o=o||f.appendChild(t.createElement(\"div\")),s=(ot.exec(i)||[\"\",\"\"])[1].toLowerCase(),a=ht[s]||ht._default,o.innerHTML=a[1]+i.replace(it,\"<$1></$2>\")+a[2],u=a[0];while(u--)o=o.lastChild;b.merge(h,o.childNodes),o=f.firstChild,o.textContent=\"\"}else h.push(t.createTextNode(i));f.textContent=\"\",l=0;while(i=h[l++])if((!r||-1===b.inArray(i,r))&&(c=b.contains(i.ownerDocument,i),o=bt(f.appendChild(i),\"script\"),c&&yt(o),n)){u=0;while(i=o[u++])lt.test(i.type||\"\")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=b.event.special,c=0;for(;(n=e[c])!==undefined;c++){if(M.accepts(n)&&(o=n[W.expando],o&&(t=W.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?b.event.remove(n,i):b.removeEvent(n,i,t.handle);W.cache[o]&&delete W.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return b.ajax({url:e,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})}});function dt(e,t){return b.nodeName(e,\"table\")&&b.nodeName(1===t.nodeType?t:t.firstChild,\"tr\")?e.getElementsByTagName(\"tbody\")[0]||e.appendChild(e.ownerDocument.createElement(\"tbody\")):e}function gt(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function mt(e){var t=pt.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function yt(e,t){var n=e.length,r=0;for(;n>r;r++)W.set(e[r],\"globalEval\",!t||W.get(t[r],\"globalEval\"))}function vt(e,t){var n,r,i,o,s,a,c,u;if(1===t.nodeType){if(W.hasData(e)&&(o=W.access(e),s=W.set(t,o),u=o.events)){delete s.handle,s.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)b.event.add(t,i,u[i][n])}L.hasData(e)&&(a=L.access(e),c=b.extend({},a),L.set(t,c))}}function bt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):e.querySelectorAll?e.querySelectorAll(t||\"*\"):[];return t===undefined||t&&b.nodeName(e,t)?b.merge([e],n):n}function xt(e,t){var n=t.nodeName.toLowerCase();\"input\"===n&&ct.test(e.type)?t.checked=e.checked:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}var wt,kt,Tt=/^(none|table(?!-c[ea]).+)/,Ct=/^margin/,Nt=RegExp(\"^(\"+x+\")(.*)$\",\"i\"),Dt=RegExp(\"^(\"+x+\")(?!px)[a-z%]+$\",\"i\"),St=RegExp(\"^([+-])=(\"+x+\")\",\"i\"),At={BODY:\"block\"},Et={position:\"absolute\",visibility:\"hidden\",display:\"block\"},jt={letterSpacing:0,fontWeight:400},Ht=[\"Top\",\"Right\",\"Bottom\",\"Left\"],Ot=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function Pt(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Ot.length;while(i--)if(t=Ot[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,\"none\"===b.css(e,\"display\")||!b.contains(e.ownerDocument,e)}function Wt(t){return e.getComputedStyle(t,null)}function Ft(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=W.get(r,\"olddisplay\"),n=r.style.display,t?(o[s]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&Lt(r)&&(o[s]=W.access(r,\"olddisplay\",$t(r.nodeName)))):o[s]||(i=Lt(r),(n&&\"none\"!==n||!i)&&W.set(r,\"olddisplay\",i?n:b.css(r,\"display\"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[s]||\"\":\"none\"));return e}b.fn.extend({css:function(e,t){return b.access(this,function(e,t,n){var r,i,o={},s=0;if(b.isArray(t)){for(r=Wt(e),i=t.length;i>s;s++)o[t[s]]=b.css(e,t[s],!1,r);return o}return n!==undefined?b.style(e,t,n):b.css(e,t)},e,t,arguments.length>1)},show:function(){return Ft(this,!0)},hide:function(){return Ft(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=wt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=b.camelCase(t),c=e.style;return t=b.cssProps[a]||(b.cssProps[a]=Pt(c,a)),s=b.cssHooks[t]||b.cssHooks[a],n===undefined?s&&\"get\"in s&&(i=s.get(e,!1,r))!==undefined?i:c[t]:(o=typeof n,\"string\"===o&&(i=St.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(b.css(e,t)),o=\"number\"),null==n||\"number\"===o&&isNaN(n)||(\"number\"!==o||b.cssNumber[a]||(n+=\"px\"),b.support.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(c[t]=\"inherit\"),s&&\"set\"in s&&(n=s.set(e,n,r))===undefined||(c[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=b.camelCase(t);return t=b.cssProps[a]||(b.cssProps[a]=Pt(e.style,a)),s=b.cssHooks[t]||b.cssHooks[a],s&&\"get\"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=wt(e,t,r)),\"normal\"===i&&t in jt&&(i=jt[t]),\"\"===n||n?(o=parseFloat(i),n===!0||b.isNumeric(o)?o||0:i):i}}),wt=function(e,t,n){var r,i,o,s=n||Wt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,c=e.style;return s&&(\"\"!==a||b.contains(e.ownerDocument,e)||(a=b.style(e,t)),Dt.test(a)&&Ct.test(t)&&(r=c.width,i=c.minWidth,o=c.maxWidth,c.minWidth=c.maxWidth=c.width=a,a=s.width,c.width=r,c.minWidth=i,c.maxWidth=o)),a};function qt(e,t,n){var r=Nt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function Mt(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,s=0;for(;4>o;o+=2)\"margin\"===n&&(s+=b.css(e,n+Ht[o],!0,i)),r?(\"content\"===n&&(s-=b.css(e,\"padding\"+Ht[o],!0,i)),\"margin\"!==n&&(s-=b.css(e,\"border\"+Ht[o]+\"Width\",!0,i))):(s+=b.css(e,\"padding\"+Ht[o],!0,i),\"padding\"!==n&&(s+=b.css(e,\"border\"+Ht[o]+\"Width\",!0,i)));return s}function zt(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=Wt(e),s=b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Dt.test(i))return i;r=s&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Mt(e,t,n||(s?\"border\":\"content\"),r,o)+\"px\"}function $t(e){var t=o,n=At[e];return n||(n=Rt(e,t),\"none\"!==n&&n||(kt=(kt||b(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(kt[0].contentWindow||kt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=Rt(e,t),kt.detach()),At[e]=n),n}function Rt(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],\"display\");return n.remove(),r}b.each([\"height\",\"width\"],function(e,t){b.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&Tt.test(b.css(e,\"display\"))?b.swap(e,Et,function(){return zt(e,t,r)}):zt(e,t,r):undefined},set:function(e,n,r){var i=r&&Wt(e);return qt(e,n,r?Mt(e,t,r,b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,i),i):0)}}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,t){return t?b.swap(e,{display:\"inline-block\"},wt,[e,\"marginRight\"]):undefined}}),!b.support.pixelPosition&&b.fn.position&&b.each([\"top\",\"left\"],function(e,t){b.cssHooks[t]={get:function(e,n){return n?(n=wt(e,t),Dt.test(n)?b(e).position()[t]+\"px\":n):undefined}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+Ht[r]+t]=o[r]||o[r-2]||o[0];return i}},Ct.test(e)||(b.cssHooks[e+t].set=qt)});var _t=/%20/g,Bt=/\\[\\]$/,It=/\\r?\\n/g,Xt=/^(?:submit|button|image|reset|file)$/i,Ut=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,\"elements\");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(\":disabled\")&&Ut.test(this.nodeName)&&!Xt.test(e)&&(this.checked||!ct.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(It,\"\\r\\n\")}}):{name:t.name,value:n.replace(It,\"\\r\\n\")}}).get()}}),b.param=function(e,t){var n,r=[],i=function(e,t){t=b.isFunction(t)?t():null==t?\"\":t,r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(t===undefined&&(t=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){i(this.name,this.value)});else for(n in e)Vt(n,e[n],t,i);return r.join(\"&\").replace(_t,\"+\")};function Vt(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||Bt.test(e)?r(e,i):Vt(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==b.type(t))r(e,t);else for(i in t)Vt(e+\"[\"+i+\"]\",t[i],n,r)}\"object\"==typeof module&&module&&\"object\"==typeof module.exports?module.exports=b:\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return b}),\"object\"==typeof e&&\"object\"==typeof e.document&&(e.jQuery=e.$=b)})(window);\n","define('lib/news_special/iframemanager__frame',['jquery'], function ($) {\n    var hostCommunicator = {\n        postMessageAvailable: (window.postMessage ? true : false),\n        init: function () {\n            var externalHostCommunicator = this;\n            this.setHeight();\n            this.startWatching();\n            if (this.postMessageAvailable) {\n                this.setupPostMessage();\n            }\n            $.on('istats', function (actionType, actionName, viewLabel) {\n                externalHostCommunicator.setHeight();\n                externalHostCommunicator.registerIstatsCall(actionType, actionName, viewLabel);\n            });\n        },\n        height: 0,\n        registerIstatsCall: function (actionType, actionName, viewLabel) {\n            var istatsData = {\n                'actionType': actionType,\n                'actionName': actionName,\n                'viewLabel':  viewLabel\n            };\n            if (this.postMessageAvailable) {\n                this.sendDataByPostMessage(istatsData);\n            }\n            else {\n                window.istatsQueue.push(istatsData);\n            }\n        },\n        setupPostMessage: function () {\n            window.setInterval(this.sendDataByPostMessage, 32);\n        },\n        sendDataByPostMessage: function (istatsData) {\n            var talker_uid = window.location.pathname,\n                message = {\n                    height:           this.height,\n                    hostPageCallback: hostCommunicator.hostPageCallback\n                };\n            if (istatsData) {\n                message.istats = istatsData;\n            }\n            window.parent.postMessage(talker_uid + '::' + JSON.stringify(message), '*');\n        },\n        startWatching: function () {\n            window.setInterval(this.setHeight, 32);\n        },\n        staticHeight: null,\n        setStaticHeight: function (newStaticHeight) {\n            this.staticHeight = newStaticHeight;\n        },\n        setHeight: function () {\n            var heightValues = [this.staticHeight || 0];\n            if ($('.main').length > 0) {\n                heightValues.push($('.main')[0].scrollHeight);\n            }\n            this.height = Math.max.apply(Math, heightValues);\n        },\n        hostPageCallback: false,\n        setHostPageInitialization: function (callback) {\n            hostCommunicator.hostPageCallback = callback.toString();\n        },\n        sendMessageToremoveLoadingImage: function () {\n            var message,\n                funcToExecute,\n                iframeUID = this.getValueFromQueryString('iframeUID');\n\n            funcToExecute = '' +\n                'var iframeDivContainer = document.getElementById(\"' + iframeUID + '--bbc-news-visual-journalism-loading-spinner\");' +\n                'if (iframeDivContainer) {' +\n                '    iframeDivContainer.parentNode.removeChild(iframeDivContainer);' +\n                '}';\n\n            message = {\n                'hostPageCallback' : funcToExecute\n            };\n\n            if (this.postMessageAvailable) {\n                window.parent.postMessage(window.location.pathname + '::' + JSON.stringify(message), '*');\n            }\n        },\n        getValueFromQueryString: function (name) {\n            name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n            var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)'),\n                results = regex.exec(location.search);\n            return results == null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n        }\n    };\n    return hostCommunicator;\n});\n\n","define('lib/news_special/imager',['jquery'], function ($) {\n\n    var Imager = function (opts) {\n        // Available image widths\n        this.widths = opts.availableWidths || [320, 640, 1024];\n        // regex for replacing correct section of the img src\n        this.regex = opts.regex || /^(.+\\/)\\d+$/i;\n        // Is this.resizeImages currently running?\n        this.is_resizing = false;\n        // Convert divs to imgs\n        this.change_divs_to_imgs();\n        // Kick off image enhancement\n        this.init_resize_images();\n    };\n\n    Imager.prototype = {\n        change_divs_to_imgs: function () {\n            var Imager = this;\n            $('div.delayed-image-load').each(function (index, div) {\n                div = (typeof div !== 'number') ? div : index; // get round jquery/ender differences?\n                if (div.className.search('js-no_replace') > -1) {\n                    return;\n                }\n                var additional_classes = div.className.replace('delayed-image-load', ''),\n                    img = $(\n                        '<img src=\"' +\n                        Imager.calc_img_src(div.getAttribute('data-src'), div.clientWidth) +\n                        '\" alt=\"' +\n                        (div.getAttribute('data-alt') || '') +\n                        '\" class=\"js-image_replace ' +\n                        additional_classes +\n                        '\" />'\n                    );\n                $(div).replaceWith(img[0]);\n            });\n        },\n        /*\n            calc_img_src: returns a new URL for img which is a best fit for the supplied width\n            @imgSrc Current img src\n            @width  CSS width value of the image\n        */\n        calc_img_src: function (imgSrc, width) {\n            if (imgSrc === null) {\n                return false; // make sure to return false if we can't use the value\n            }\n            var regex = imgSrc.match(this.regex) || imgSrc;\n            if (regex === null || typeof regex === 'string') {\n                return false; // make sure to return false if we can't use the value\n            }\n            return imgSrc.replace(/img\\/(\\d*)/, 'img/' + this.match_closest_value(width, this.widths));\n        },\n        /*\n            match_closest_value: returns a value closest to (but not over) from the array 'widths'\n            @width Value to match against\n        */\n        match_closest_value: function (value, values) {\n            var prev_value = values[0];\n            for (var z = 0, len = values.length; z < len; z++) {\n                if (value < values[z]) {\n                    return prev_value;\n                }\n                prev_value = values[z];\n            }\n            return prev_value;\n        },\n        init_resize_images: function () {\n            var Imager = this;\n            if (window.addEventListener) {\n                window.addEventListener('resize', function () {\n                    Imager.resize_images();\n                }, false);\n            } else {\n                window.attachEvent('onresize', function () {\n                    Imager.resize_images();\n                });\n            }\n        },\n        resize_images: function () {\n            var node_list = $('.js-image_replace'),\n                Imager = this;\n\n            if (!this.is_resizing) {\n                this.is_resizing = true;\n\n                if (node_list !== null) { // reference error occurs when the user manually resizes the browser window (this prevents it) \n                    node_list.each(function () {\n                        // IE7 error here\n                        if ($(this).hasClass('js-no_replace')) {\n                            return;\n                        }\n                        // if (this.getAttribute('class').match('js-no_replace')) {\n                        //     return;\n                        // }\n\n                        // Set src to value of calc_img_src if value is not false;\n                        var newImgSrc = Imager.calc_img_src(\n                            (this.getAttribute('datasrc') || this.src),\n                            this.clientWidth\n                        );\n                        if (!!newImgSrc && (this.src !== newImgSrc)) {\n                            this.src = newImgSrc;\n                        }\n                    });\n                }\n                this.is_resizing = false;\n            }\n        }\n    };\n\n    return Imager;\n\n});\n","define('lib/news_special/imager_image_sizes',[],function () {return [320, 640, 1024]; });\n","define('pubsub',['jquery'], function($) {\n    \n    /*!\n     * jQuery Tiny Pub/Sub - v0.6 - 1/10/2011\n     * http://benalman.com/\n     *\n     * Copyright (c) 2010 \"Cowboy\" Ben Alman\n     * Dual licensed under the MIT and GPL licenses.\n     * http://benalman.com/about/license/\n     *\n     * We purposely use an older version of the Tiny Pub/Sub implementation\n     * because we want to keep API parity with existing code.\n     * Newer versions meant the 'event' object would be passed as the first\n     * argument to the subscriber/callback and this meant changing all our \n     * EventEmitter code. I decided it was best to avoid that issue and use \n     * an older version whose only difference is to strip off the first \n     * argument so as to result in a true refactoring where we don't tamper\n     * with the interface, just the implementation.\n     */\n\n    // Create a \"dummy\" jQuery object on which to bind, `off` and `trigger` event handlers. \n    var o = $({});\n\n    /*\n        Subscribe to a topic. Works just like `on`, except the passed handler\n        is wrapped in a function so that the event object can be stripped out.\n        Even though the event object might be useful, it is unnecessary and\n        will only complicate things in the future should the user decide to move\n        to a non-$.event-based pub/sub implementation.\n     */\n    $.on = function( topic, fn ) {\n        // Call fn, stripping out the 1st argument (the event object).\n        function wrapper() {\n            return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n\n        // Add .guid property to function to allow it to be easily unbound. Note\n        // that $.guid is new in jQuery 1.4+, and $.event.guid was used before.\n        wrapper.guid = fn.guid = fn.guid || ($.guid ? $.guid++ : $.event.guid++);\n\n        // Bind the handler.\n        o.on( topic, wrapper );\n    };\n\n    // Unsubscribe from a topic. Works exactly like unbind.\n    $.off = function() {\n        o.off.apply( o, arguments );\n    };\n\n    // Publish a topic. Works exactly like trigger.\n    $.emit = function() {\n        o.trigger.apply( o, arguments );\n    };\n});\n","define('lib/news_special/bootstrap',[\n    'jquery',\n    'lib/news_special/iframemanager__frame',\n    'lib/news_special/imager',\n    'lib/news_special/imager_image_sizes',\n    'pubsub'\n], function ($, iframemanager__frame, Imager, imageSizes) {\n\n    // responsive iframe\n    iframemanager__frame.init();\n\n    // responsive images\n    var imager = new Imager({\n        availableWidths: imageSizes,\n        regex: /(\\/news\\/.*img\\/)\\d+(\\/.*)$/i\n    });\n    $.on('resize_images', function () {\n        imager.resize_images();\n    });\n    $.on('init_images', function () {\n        imager.change_divs_to_imgs();\n    });\n\n    return {\n        $: $,\n        pubsub: $,\n        setStaticIframeHeight: function (newStaticHeight) {\n            iframemanager__frame.setStaticHeight(newStaticHeight);\n        },\n        hostPageSetup: function (callback) {\n            iframemanager__frame.setHostPageInitialization(callback);\n        },\n        sendMessageToremoveLoadingImage: function () {\n            iframemanager__frame.sendMessageToremoveLoadingImage();\n        },\n        scaffoldLite: false\n    };\n\n});\n","/**\n * @license RequireJS text 2.0.13+ Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.13+',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.lastIndexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config && config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config && config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'] &&\n            !process.versions['atom-shell'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file[0] === '\\uFEFF') {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                if (errback) {\n                    errback(e);\n                }\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status || 0;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        if (errback) {\n                            errback(err);\n                        }\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes;\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n\n","\ndefine('text!../data/map_data.json',[],function () { return '{\\n    \"areas_40\": {\\n        \"name\": \"Guildford\",\\n        \"Postcode\": \"GU\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,800\"], [\"Jack Russell Terrier\", \"4,800\"], [\"Cocker Spaniel\", \"3,600\"], [\"Staffordshire Bull Terrier\", \"3,300\"], [\"Border Collie\", \"2,600\"]]\\n    },\\n    \"areas_122\": {\\n        \"name\": \"Guernsey\",\\n        \"Postcode\": \"GY\",\\n        \"topFive\": [[\"Labrador Retriever\", \"400\"], [\"Jack Russell Terrier\", \"300\"], [\"Cocker Spaniel\", \"200\"], [\"English Springer Spaniel\", \"200\"], [\"West Highland White Terrier\", \"100\"]]\\n    },\\n    \"areas_39\": {\\n        \"name\": \"Gloucester\",\\n        \"Postcode\": \"GL\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,000\"], [\"Jack Russell Terrier\", \"6,000\"], [\"Cocker Spaniel\", \"3,300\"], [\"Border Collie\", \"3,300\"], [\"Staffordshire Bull Terrier\", \"2,900\"]]\\n    },\\n    \"areas_120\": {\\n        \"name\": \"Lerwick\",\\n        \"Postcode\": \"ZE\",\\n        \"topFive\": [[\"Border Collie\", \"95\"], [\"Labrador Retriever\", \"70\"], [\"Staffordshire Bull Terrier\", \"37\"], [\"German Shepherd\", \"28\"], [\"Jack Russell Terrier\", \"22\"]]\\n    },\\n    \"areas_65\": {\\n        \"name\": \"Rochester\",\\n        \"Postcode\": \"ME\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"5,200\"], [\"Labrador Retriever\", \"4,800\"], [\"Jack Russell Terrier\", \"4,200\"], [\"Cocker Spaniel\", \"2,200\"], [\"German Shepherd\", \"2,100\"]]\\n    },\\n    \"areas_67\": {\\n        \"name\": \"Motherwell\",\\n        \"Postcode\": \"ML\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,200\"], [\"Lhasa Apso\", \"1,300\"], [\"Border Collie\", \"1,200\"], [\"Staffordshire Bull Terrier\", \"1,100\"], [\"Jack Russell Terrier\", \"900\"]]\\n    },\\n    \"areas_66\": {\\n        \"name\": \"Milton Keynes\",\\n        \"Postcode\": \"MK\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,700\"], [\"Staffordshire Bull Terrier\", \"3,100\"], [\"Jack Russell Terrier\", \"3,000\"], [\"Cocker Spaniel\", \"2,200\"], [\"Border Collie\", \"1,800\"]]\\n    },\\n    \"areas_37\": {\\n        \"name\": \"Blackpool\",\\n        \"Postcode\": \"FY\",\\n        \"topFive\": [[\"Labrador Retriever\", \"1,800\"], [\"Staffordshire Bull Terrier\", \"1,700\"], [\"Jack Russell Terrier\", \"1,500\"], [\"Cocker Spaniel\", \"1,100\"], [\"Border Collie\", \"900\"]]\\n    },\\n    \"areas_36\": {\\n        \"name\": \"Falkirk\",\\n        \"Postcode\": \"FK\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,800\"], [\"Border Collie\", \"1,200\"], [\"Cocker Spaniel\", \"1,200\"], [\"Lhasa Apso\", \"1,000\"], [\"Jack Russell Terrier\", \"900\"]]\\n    },\\n    \"areas_100\": {\\n        \"name\": \"Shrewsbury\",\\n        \"Postcode\": \"SY\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,000\"], [\"Border Collie\", \"3,100\"], [\"Jack Russell Terrier\", \"2,900\"], [\"Cocker Spaniel\", \"1,900\"], [\"English Springer Spaniel\", \"1,500\"]]\\n    },\\n    \"areas_97\": {\\n        \"name\": \"Southend-on-Sea\",\\n        \"Postcode\": \"SS\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"4,600\"], [\"Jack Russell Terrier\", \"3,100\"], [\"Labrador Retriever\", \"2,900\"], [\"Cocker Spaniel\", \"2,000\"], [\"German Shepherd\", \"1,600\"]]\\n    },\\n    \"areas_96\": {\\n        \"name\": \"Sunderland\",\\n        \"Postcode\": \"SR\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,600\"], [\"Labrador Retriever\", \"1,500\"], [\"Jack Russell Terrier\", \"1,400\"], [\"Shih Tzu\", \"1,200\"], [\"German Shepherd\", \"800\"]]\\n    },\\n    \"areas_95\": {\\n        \"name\": \"Salisbury\",\\n        \"Postcode\": \"SP\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,200\"], [\"Jack Russell Terrier\", \"2,500\"], [\"Cocker Spaniel\", \"1,700\"], [\"Border Collie\", \"1,300\"], [\"English Springer Spaniel\", \"1,200\"]]\\n    },\\n    \"areas_99\": {\\n        \"name\": \"South West London\",\\n        \"Postcode\": \"SW\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,900\"], [\"Labrador Retriever\", \"2,200\"], [\"Jack Russell Terrier\", \"1,700\"], [\"Cocker Spaniel\", \"1,400\"], [\"Yorkshire Terrier\", \"1,000\"]]\\n    },\\n    \"areas_98\": {\\n        \"name\": \"Stoke-on-Trent\",\\n        \"Postcode\": \"ST\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"6,500\"], [\"Jack Russell Terrier\", \"5,700\"], [\"Labrador Retriever\", \"5,600\"], [\"Border Collie\", \"3,300\"], [\"Cocker Spaniel\", \"2,400\"]]\\n    },\\n    \"areas_90\": {\\n        \"name\": \"Stockport\",\\n        \"Postcode\": \"SK\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,100\"], [\"Jack Russell Terrier\", \"3,200\"], [\"Staffordshire Bull Terrier\", \"2,800\"], [\"Border Collie\", \"2,800\"], [\"Cocker Spaniel\", \"2,200\"]]\\n    },\\n    \"areas_94\": {\\n        \"name\": \"Southampton\",\\n        \"Postcode\": \"SO\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,300\"], [\"Jack Russell Terrier\", \"4,800\"], [\"Cocker Spaniel\", \"3,200\"], [\"Staffordshire Bull Terrier\", \"2,900\"], [\"Border Collie\", \"2,500\"]]\\n    },\\n    \"areas_93\": {\\n        \"name\": \"Swindon\",\\n        \"Postcode\": \"SN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,100\"], [\"Jack Russell Terrier\", \"5,000\"], [\"Cocker Spaniel\", \"2,700\"], [\"Staffordshire Bull Terrier\", \"2,400\"], [\"Border Collie\", \"2,100\"]]\\n    },\\n    \"areas_92\": {\\n        \"name\": \"Sutton\",\\n        \"Postcode\": \"SM\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,400\"], [\"Jack Russell Terrier\", \"800\"], [\"Labrador Retriever\", \"700\"], [\"Cocker Spaniel\", \"400\"], [\"Yorkshire Terrier\", \"400\"]]\\n    },\\n    \"areas_91\": {\\n        \"name\": \"Slough\",\\n        \"Postcode\": \"SL\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,600\"], [\"Jack Russell Terrier\", \"1,900\"], [\"Staffordshire Bull Terrier\", \"1,700\"], [\"Cocker Spaniel\", \"1,000\"], [\"German Shepherd\", \"900\"]]\\n    },\\n    \"areas_87\": {\\n        \"name\": \"Swansea\",\\n        \"Postcode\": \"SA\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"7,000\"], [\"Labrador Retriever\", \"6,200\"], [\"Border Collie\", \"4,500\"], [\"Staffordshire Bull Terrier\", \"3,700\"], [\"Cocker Spaniel\", \"3,100\"]]\\n    },\\n    \"areas_89\": {\\n        \"name\": \"Stevenage\",\\n        \"Postcode\": \"SG\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,500\"], [\"Jack Russell Terrier\", \"2,500\"], [\"Staffordshire Bull Terrier\", \"2,300\"], [\"Cocker Spaniel\", \"1,800\"], [\"Border Collie\", \"1,300\"]]\\n    },\\n    \"areas_88\": {\\n        \"name\": \"South East London\",\\n        \"Postcode\": \"SE\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"7,300\"], [\"Jack Russell Terrier\", \"2,200\"], [\"Labrador Retriever\", \"1,600\"], [\"Yorkshire Terrier\", \"1,300\"], [\"German Shepherd\", \"900\"]]\\n    },\\n    \"areas_119\": {\\n        \"name\": \"York\",\\n        \"Postcode\": \"YO\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,700\"], [\"Jack Russell Terrier\", \"4,500\"], [\"Cocker Spaniel\", \"3,700\"], [\"Border Collie\", \"2,800\"], [\"Staffordshire Bull Terrier\", \"2,700\"]]\\n    },\\n    \"areas_58\": {\\n        \"name\": \"Llandrindod Wells\",\\n        \"Postcode\": \"LD\",\\n        \"topFive\": [[\"Border Collie\", \"700\"], [\"Jack Russell Terrier\", \"600\"], [\"Labrador Retriever\", \"500\"], [\"Cocker Spaniel\", \"200\"], [\"English Springer Spaniel\", \"200\"]]\\n    },\\n    \"areas_59\": {\\n        \"name\": \"Leicester\",\\n        \"Postcode\": \"LE\",\\n        \"topFive\": [[\"Labrador Retriever\", \"7,300\"], [\"Staffordshire Bull Terrier\", \"5,200\"], [\"Jack Russell Terrier\", \"4,800\"], [\"Cocker Spaniel\", \"3,400\"], [\"Border Collie\", \"3,000\"]]\\n    },\\n    \"areas_57\": {\\n        \"name\": \"Lancaster\",\\n        \"Postcode\": \"LA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,200\"], [\"Border Collie\", \"2,400\"], [\"Staffordshire Bull Terrier\", \"2,200\"], [\"Jack Russell Terrier\", \"2,100\"], [\"Cocker Spaniel\", \"1,400\"]]\\n    },\\n    \"areas_61\": {\\n        \"name\": \"Lincoln\",\\n        \"Postcode\": \"LN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,900\"], [\"Jack Russell Terrier\", \"2,300\"], [\"Cocker Spaniel\", \"1,600\"], [\"Border Collie\", \"1,200\"], [\"Staffordshire Bull Terrier\", \"1,200\"]]\\n    },\\n    \"areas_60\": {\\n        \"name\": \"Llandudno\",\\n        \"Postcode\": \"LL\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,000\"], [\"Border Collie\", \"4,300\"], [\"Jack Russell Terrier\", \"4,000\"], [\"Staffordshire Bull Terrier\", \"2,300\"], [\"Cocker Spaniel\", \"1,900\"]]\\n    },\\n    \"areas_63\": {\\n        \"name\": \"Luton\",\\n        \"Postcode\": \"LU\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,200\"], [\"Labrador Retriever\", \"2,000\"], [\"Jack Russell Terrier\", \"1,600\"], [\"German Shepherd\", \"900\"], [\"Cocker Spaniel\", \"900\"]]\\n    },\\n    \"areas_62\": {\\n        \"name\": \"Leeds\",\\n        \"Postcode\": \"LS\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,600\"], [\"Staffordshire Bull Terrier\", \"4,200\"], [\"Jack Russell Terrier\", \"3,200\"], [\"Cocker Spaniel\", \"2,200\"], [\"Border Collie\", \"1,800\"]]\\n    },\\n    \"areas_83\": {\\n        \"name\": \"Reading\",\\n        \"Postcode\": \"RG\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,600\"], [\"Jack Russell Terrier\", \"4,900\"], [\"Cocker Spaniel\", \"3,500\"], [\"Staffordshire Bull Terrier\", \"3,100\"], [\"Border Collie\", \"2,500\"]]\\n    },\\n    \"areas_85\": {\\n        \"name\": \"Romford\",\\n        \"Postcode\": \"RM\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"5,100\"], [\"Jack Russell Terrier\", \"2,600\"], [\"Labrador Retriever\", \"1,900\"], [\"Yorkshire Terrier\", \"1,400\"], [\"German Shepherd\", \"1,400\"]]\\n    },\\n    \"areas_84\": {\\n        \"name\": \"Redhill\",\\n        \"Postcode\": \"RH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,100\"], [\"Jack Russell Terrier\", \"3,700\"], [\"Staffordshire Bull Terrier\", \"2,400\"], [\"Cocker Spaniel\", \"2,200\"], [\"Border Collie\", \"2,100\"]]\\n    },\\n    \"areas_56\": {\\n        \"name\": \"Liverpool\",\\n        \"Postcode\": \"L\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"5,100\"], [\"Shih Tzu\", \"4,600\"], [\"Jack Russell Terrier\", \"3,200\"], [\"Labrador Retriever\", \"3,000\"], [\"Yorkshire Terrier\", \"2,500\"]]\\n    },\\n    \"areas_50\": {\\n        \"name\": \"Ipswich\",\\n        \"Postcode\": \"IP\",\\n        \"topFive\": [[\"Labrador Retriever\", \"9,300\"], [\"Jack Russell Terrier\", \"3,900\"], [\"Cocker Spaniel\", \"3,400\"], [\"Staffordshire Bull Terrier\", \"2,800\"], [\"Border Collie\", \"2,600\"]]\\n    },\\n    \"areas_34\": {\\n        \"name\": \"Enfield\",\\n        \"Postcode\": \"EN\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,300\"], [\"Labrador Retriever\", \"1,300\"], [\"Jack Russell Terrier\", \"1,300\"], [\"German Shepherd\", \"800\"], [\"Cocker Spaniel\", \"700\"]]\\n    },\\n    \"areas_33\": {\\n        \"name\": \"Edinburgh\",\\n        \"Postcode\": \"EH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,800\"], [\"Cocker Spaniel\", \"3,600\"], [\"Border Collie\", \"2,800\"], [\"Staffordshire Bull Terrier\", \"2,800\"], [\"Jack Russell Terrier\", \"2,200\"]]\\n    },\\n    \"areas_38\": {\\n        \"name\": \"Glasgow\",\\n        \"Postcode\": \"G\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,500\"], [\"Lhasa Apso\", \"2,900\"], [\"Staffordshire Bull Terrier\", \"2,600\"], [\"Border Collie\", \"2,600\"], [\"Cocker Spaniel\", \"2,200\"]]\\n    },\\n    \"areas_32\": {\\n        \"name\": \"East Central London\",\\n        \"Postcode\": \"EC\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"300\"], [\"Jack Russell Terrier\", \"92\"], [\"Labrador Retriever\", \"39\"], [\"German Shepherd\", \"35\"], [\"Lurcher\", \"33\"]]\\n    },\\n    \"areas_35\": {\\n        \"name\": \"Exeter\",\\n        \"Postcode\": \"EX\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,900\"], [\"Jack Russell Terrier\", \"6,000\"], [\"Border Collie\", \"4,500\"], [\"Cocker Spaniel\", \"3,200\"], [\"English Springer Spaniel\", \"3,100\"]]\\n    },\\n    \"areas_110\": {\\n        \"name\": \"West London\",\\n        \"Postcode\": \"W\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,300\"], [\"Labrador Retriever\", \"800\"], [\"Jack Russell Terrier\", \"800\"], [\"Yorkshire Terrier\", \"500\"], [\"Cocker Spaniel\", \"500\"]]\\n    },\\n    \"areas_51\": {\\n        \"name\": \"Inverness\",\\n        \"Postcode\": \"IV\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,800\"], [\"Border Collie\", \"1,500\"], [\"Cocker Spaniel\", \"1,300\"], [\"Jack Russell Terrier\", \"900\"], [\"German Shepherd\", \"700\"]]\\n    },\\n    \"areas_3\": {\\n        \"name\": \"Birmingham\",\\n        \"Postcode\": \"B\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"14,400\"], [\"Labrador Retriever\", \"8,100\"], [\"Jack Russell Terrier\", \"7,300\"], [\"Border Collie\", \"4,600\"], [\"Yorkshire Terrier\", \"4,600\"]]\\n    },\\n    \"areas_52\": {\\n        \"name\": \"Kilmarnock\",\\n        \"Postcode\": \"KA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,300\"], [\"Border Collie\", \"1,500\"], [\"Cocker Spaniel\", \"1,200\"], [\"Jack Russell Terrier\", \"1,200\"], [\"Staffordshire Bull Terrier\", \"1,100\"]]\\n    },\\n    \"areas_54\": {\\n        \"name\": \"Kirkwall\",\\n        \"Postcode\": \"KW\",\\n        \"topFive\": [[\"Labrador Retriever\", \"41\"], [\"Border Collie\", \"30\"], [\"English Springer Spaniel\", \"12\"], [\"Jack Russell Terrier\", \"12\"], [\"Staffordshire Bull Terrier\", \"10\"]]\\n    },\\n    \"areas_53\": {\\n        \"name\": \"Kingston upon Thames\",\\n        \"Postcode\": \"KT\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,200\"], [\"Staffordshire Bull Terrier\", \"2,100\"], [\"Jack Russell Terrier\", \"1,900\"], [\"Cocker Spaniel\", \"1,400\"], [\"German Shepherd\", \"900\"]]\\n    },\\n    \"areas_55\": {\\n        \"name\": \"Kirkcaldy\",\\n        \"Postcode\": \"KY\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,100\"], [\"Cocker Spaniel\", \"1,800\"], [\"Border Collie\", \"1,700\"], [\"Jack Russell Terrier\", \"1,300\"], [\"Staffordshire Bull Terrier\", \"1,200\"]]\\n    },\\n    \"areas_28\": {\\n        \"name\": \"Doncaster\",\\n        \"Postcode\": \"DN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"9,100\"], [\"Jack Russell Terrier\", \"5,400\"], [\"Staffordshire Bull Terrier\", \"4,900\"], [\"Cocker Spaniel\", \"3,300\"], [\"German Shepherd\", \"3,200\"]]\\n    },\\n    \"areas_27\": {\\n        \"name\": \"Darlington\",\\n        \"Postcode\": \"DL\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,700\"], [\"Jack Russell Terrier\", \"3,600\"], [\"Border Collie\", \"2,800\"], [\"Staffordshire Bull Terrier\", \"2,600\"], [\"Cocker Spaniel\", \"2,200\"]]\\n    },\\n    \"areas_26\": {\\n        \"name\": \"Durham\",\\n        \"Postcode\": \"DH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,100\"], [\"Jack Russell Terrier\", \"2,900\"], [\"Staffordshire Bull Terrier\", \"2,400\"], [\"Border Collie\", \"1,500\"], [\"Cocker Spaniel\", \"1,300\"]]\\n    },\\n    \"areas_25\": {\\n        \"name\": \"Dumfries\",\\n        \"Postcode\": \"DG\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,000\"], [\"Border Collie\", \"1,100\"], [\"Cocker Spaniel\", \"700\"], [\"Jack Russell Terrier\", \"700\"], [\"German Shepherd\", \"400\"]]\\n    },\\n    \"areas_23\": {\\n        \"name\": \"Dundee\",\\n        \"Postcode\": \"DD\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,700\"], [\"Border Collie\", \"1,400\"], [\"Cocker Spaniel\", \"1,300\"], [\"Jack Russell Terrier\", \"1,000\"], [\"Staffordshire Bull Terrier\", \"1,000\"]]\\n    },\\n    \"areas_24\": {\\n        \"name\": \"Derby\",\\n        \"Postcode\": \"DE\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,900\"], [\"Staffordshire Bull Terrier\", \"5,700\"], [\"Jack Russell Terrier\", \"5,600\"], [\"Border Collie\", \"4,300\"], [\"Cocker Spaniel\", \"3,100\"]]\\n    },\\n    \"areas_22\": {\\n        \"name\": \"Dartford\",\\n        \"Postcode\": \"DA\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"4,500\"], [\"Jack Russell Terrier\", \"2,700\"], [\"Labrador Retriever\", \"2,100\"], [\"German Shepherd\", \"1,100\"], [\"Yorkshire Terrier\", \"1,000\"]]\\n    },\\n    \"areas_30\": {\\n        \"name\": \"Dudley\",\\n        \"Postcode\": \"DY\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"4,600\"], [\"Labrador Retriever\", \"3,100\"], [\"Jack Russell Terrier\", \"3,000\"], [\"Cocker Spaniel\", \"1,800\"], [\"Border Collie\", \"1,800\"]]\\n    },\\n    \"areas_29\": {\\n        \"name\": \"Dorchester\",\\n        \"Postcode\": \"DT\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,300\"], [\"Jack Russell Terrier\", \"2,400\"], [\"Border Collie\", \"1,400\"], [\"Cocker Spaniel\", \"1,400\"], [\"English Springer Spaniel\", \"1,100\"]]\\n    },\\n    \"areas_64\": {\\n        \"name\": \"Manchester\",\\n        \"Postcode\": \"M\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"7,000\"], [\"Jack Russell Terrier\", \"3,300\"], [\"Labrador Retriever\", \"3,000\"], [\"Yorkshire Terrier\", \"2,600\"], [\"Shih Tzu\", \"2,600\"]]\\n    },\\n    \"areas_114\": {\\n        \"name\": \"Wakefield\",\\n        \"Postcode\": \"WF\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"3,800\"], [\"Labrador Retriever\", \"3,500\"], [\"Jack Russell Terrier\", \"2,900\"], [\"Lhasa Apso\", \"2,100\"], [\"German Shepherd\", \"1,800\"]]\\n    },\\n    \"areas_113\": {\\n        \"name\": \"Watford\",\\n        \"Postcode\": \"WD\",\\n        \"topFive\": [[\"Labrador Retriever\", \"1,200\"], [\"Staffordshire Bull Terrier\", \"1,200\"], [\"Jack Russell Terrier\", \"1,000\"], [\"German Shepherd\", \"500\"], [\"Cocker Spaniel\", \"500\"]]\\n    },\\n    \"areas_112\": {\\n        \"name\": \"Western Central London\",\\n        \"Postcode\": \"WC\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"59\"], [\"Jack Russell Terrier\", \"39\"], [\"Yorkshire Terrier\", \"30\"], [\"Chihuahua\", \"24\"], [\"West Highland White Terrier\", \"17\"]]\\n    },\\n    \"areas_111\": {\\n        \"name\": \"Warrington\",\\n        \"Postcode\": \"WA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,900\"], [\"Staffordshire Bull Terrier\", \"3,700\"], [\"Jack Russell Terrier\", \"2,700\"], [\"Shih Tzu\", \"2,100\"], [\"Yorkshire Terrier\", \"1,900\"]]\\n    },\\n    \"areas_115\": {\\n        \"name\": \"Wigan\",\\n        \"Postcode\": \"WN\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,500\"], [\"Labrador Retriever\", \"2,000\"], [\"Jack Russell Terrier\", \"1,600\"], [\"Shih Tzu\", \"1,200\"], [\"Yorkshire Terrier\", \"1,000\"]]\\n    },\\n    \"areas_118\": {\\n        \"name\": \"Wolverhampton\",\\n        \"Postcode\": \"WV\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"3,500\"], [\"Labrador Retriever\", \"2,400\"], [\"Jack Russell Terrier\", \"2,000\"], [\"Cocker Spaniel\", \"1,400\"], [\"Border Collie\", \"1,200\"]]\\n    },\\n    \"areas_117\": {\\n        \"name\": \"Walsall\",\\n        \"Postcode\": \"WS\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"4,800\"], [\"Labrador Retriever\", \"3,100\"], [\"Jack Russell Terrier\", \"2,700\"], [\"Border Collie\", \"1,800\"], [\"Cocker Spaniel\", \"1,700\"]]\\n    },\\n    \"areas_116\": {\\n        \"name\": \"Worcester\",\\n        \"Postcode\": \"WR\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,800\"], [\"Jack Russell Terrier\", \"2,800\"], [\"Border Collie\", \"1,800\"], [\"Cocker Spaniel\", \"1,800\"], [\"Staffordshire Bull Terrier\", \"1,400\"]]\\n    },\\n    \"areas_124\": {\\n        \"name\": \"Jersey\",\\n        \"Postcode\": \"JE\",\\n        \"topFive\": [[\"Labrador Retriever\", \"700\"], [\"Jack Russell Terrier\", \"500\"], [\"Cocker Spaniel\", \"300\"], [\"Border Collie\", \"200\"], [\"Shih Tzu\", \"200\"]]\\n    },\\n    \"areas_82\": {\\n        \"name\": \"Preston\",\\n        \"Postcode\": \"PR\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,400\"], [\"Jack Russell Terrier\", \"2,800\"], [\"Staffordshire Bull Terrier\", \"2,400\"], [\"Border Collie\", \"1,800\"], [\"Cocker Spaniel\", \"1,700\"]]\\n    },\\n    \"areas_77\": {\\n        \"name\": \"Paisley\",\\n        \"Postcode\": \"PA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"1,700\"], [\"Border Collie\", \"1,100\"], [\"Cocker Spaniel\", \"800\"], [\"Jack Russell Terrier\", \"800\"], [\"Lhasa Apso\", \"700\"]]\\n    },\\n    \"areas_78\": {\\n        \"name\": \"Peterborough\",\\n        \"Postcode\": \"PE\",\\n        \"topFive\": [[\"Labrador Retriever\", \"12,400\"], [\"Jack Russell Terrier\", \"7,300\"], [\"Staffordshire Bull Terrier\", \"6,300\"], [\"Cocker Spaniel\", \"5,100\"], [\"German Shepherd\", \"3,900\"]]\\n    },\\n    \"areas_79\": {\\n        \"name\": \"Perth\",\\n        \"Postcode\": \"PH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,500\"], [\"Border Collie\", \"1,100\"], [\"Cocker Spaniel\", \"1,000\"], [\"Jack Russell Terrier\", \"600\"], [\"English Springer Spaniel\", \"400\"]]\\n    },\\n    \"areas_81\": {\\n        \"name\": \"Portsmouth\",\\n        \"Postcode\": \"PO\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,600\"], [\"Jack Russell Terrier\", \"5,800\"], [\"Staffordshire Bull Terrier\", \"4,600\"], [\"Cocker Spaniel\", \"3,200\"], [\"Border Collie\", \"2,800\"]]\\n    },\\n    \"areas_80\": {\\n        \"name\": \"Plymouth\",\\n        \"Postcode\": \"PL\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"5,600\"], [\"Labrador Retriever\", \"5,200\"], [\"Border Collie\", \"3,900\"], [\"Staffordshire Bull Terrier\", \"3,100\"], [\"English Springer Spaniel\", \"2,200\"]]\\n    },\\n    \"areas_86\": {\\n        \"name\": \"Sheffield\",\\n        \"Postcode\": \"S\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"11,700\"], [\"Labrador Retriever\", \"11,200\"], [\"Jack Russell Terrier\", \"8,300\"], [\"Cocker Spaniel\", \"5,000\"], [\"Border Collie\", \"4,600\"]]\\n    },\\n    \"areas_15\": {\\n        \"name\": \"Chester\",\\n        \"Postcode\": \"CH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,800\"], [\"Jack Russell Terrier\", \"3,500\"], [\"Staffordshire Bull Terrier\", \"2,900\"], [\"Border Collie\", \"2,800\"], [\"Cocker Spaniel\", \"2,200\"]]\\n    },\\n    \"areas_17\": {\\n        \"name\": \"Colchester\",\\n        \"Postcode\": \"CO\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,000\"], [\"Staffordshire Bull Terrier\", \"2,700\"], [\"Jack Russell Terrier\", \"2,600\"], [\"Cocker Spaniel\", \"2,400\"], [\"Border Collie\", \"1,500\"]]\\n    },\\n    \"areas_16\": {\\n        \"name\": \"Chelmsford\",\\n        \"Postcode\": \"CM\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,700\"], [\"Jack Russell Terrier\", \"4,800\"], [\"Staffordshire Bull Terrier\", \"4,600\"], [\"Cocker Spaniel\", \"3,700\"], [\"German Shepherd\", \"2,300\"]]\\n    },\\n    \"areas_13\": {\\n        \"name\": \"Cambridge\",\\n        \"Postcode\": \"CB\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,700\"], [\"Jack Russell Terrier\", \"2,600\"], [\"Cocker Spaniel\", \"2,200\"], [\"Staffordshire Bull Terrier\", \"1,500\"], [\"Border Collie\", \"1,100\"]]\\n    },\\n    \"areas_12\": {\\n        \"name\": \"Carlisle\",\\n        \"Postcode\": \"CA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,000\"], [\"Border Collie\", \"3,400\"], [\"Jack Russell Terrier\", \"2,600\"], [\"Staffordshire Bull Terrier\", \"1,600\"], [\"Cocker Spaniel\", \"1,600\"]]\\n    },\\n    \"areas_14\": {\\n        \"name\": \"Cardiff\",\\n        \"Postcode\": \"CF\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"7,800\"], [\"Staffordshire Bull Terrier\", \"6,100\"], [\"Labrador Retriever\", \"6,000\"], [\"Border Collie\", \"3,800\"], [\"Yorkshire Terrier\", \"3,000\"]]\\n    },\\n    \"areas_68\": {\\n        \"name\": \"North London\",\\n        \"Postcode\": \"N\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"3,400\"], [\"Jack Russell Terrier\", \"1,200\"], [\"Labrador Retriever\", \"1,100\"], [\"Yorkshire Terrier\", \"800\"], [\"Cocker Spaniel\", \"600\"]]\\n    },\\n    \"areas_18\": {\\n        \"name\": \"Croydon\",\\n        \"Postcode\": \"CR\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,600\"], [\"Jack Russell Terrier\", \"1,300\"], [\"Labrador Retriever\", \"1,300\"], [\"German Shepherd\", \"700\"], [\"Border Collie\", \"600\"]]\\n    },\\n    \"areas_21\": {\\n        \"name\": \"Crewe\",\\n        \"Postcode\": \"CW\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,500\"], [\"Jack Russell Terrier\", \"2,300\"], [\"Staffordshire Bull Terrier\", \"1,700\"], [\"Border Collie\", \"1,500\"], [\"Cocker Spaniel\", \"1,300\"]]\\n    },\\n    \"areas_20\": {\\n        \"name\": \"Coventry\",\\n        \"Postcode\": \"CV\",\\n        \"topFive\": [[\"Labrador Retriever\", \"7,000\"], [\"Staffordshire Bull Terrier\", \"6,300\"], [\"Jack Russell Terrier\", \"5,400\"], [\"Border Collie\", \"3,100\"], [\"Cocker Spaniel\", \"2,900\"]]\\n    },\\n    \"areas_19\": {\\n        \"name\": \"Canterbury\",\\n        \"Postcode\": \"CT\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,200\"], [\"Staffordshire Bull Terrier\", \"4,100\"], [\"Jack Russell Terrier\", \"3,600\"], [\"Cocker Spaniel\", \"1,900\"], [\"German Shepherd\", \"1,500\"]]\\n    },\\n    \"areas_123\": {\\n        \"name\": \"Isle of Man\",\\n        \"Postcode\": \"IM\",\\n        \"topFive\": [[\"Labrador Retriever\", \"700\"], [\"Border Collie\", \"600\"], [\"Jack Russell Terrier\", \"400\"], [\"Cocker Spaniel\", \"300\"], [\"Staffordshire Bull Terrier\", \"200\"]]\\n    },\\n    \"areas_49\": {\\n        \"name\": \"Ilford\",\\n        \"Postcode\": \"IG\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,600\"], [\"Jack Russell Terrier\", \"800\"], [\"Labrador Retriever\", \"700\"], [\"Yorkshire Terrier\", \"500\"], [\"German Shepherd\", \"500\"]]\\n    },\\n    \"areas_6\": {\\n        \"name\": \"Bradford\",\\n        \"Postcode\": \"BD\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,200\"], [\"Staffordshire Bull Terrier\", \"2,900\"], [\"Jack Russell Terrier\", \"2,800\"], [\"Border Collie\", \"2,500\"], [\"Cocker Spaniel\", \"1,600\"]]\\n    },\\n    \"areas_4\": {\\n        \"name\": \"Bath\",\\n        \"Postcode\": \"BA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,400\"], [\"Jack Russell Terrier\", \"4,400\"], [\"Cocker Spaniel\", \"2,100\"], [\"Border Collie\", \"2,000\"], [\"Greyhound\", \"1,900\"]]\\n    },\\n    \"areas_5\": {\\n        \"name\": \"Blackburn\",\\n        \"Postcode\": \"BB\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,500\"], [\"Jack Russell Terrier\", \"2,300\"], [\"Staffordshire Bull Terrier\", \"2,300\"], [\"Border Collie\", \"1,900\"], [\"Cocker Spaniel\", \"1,300\"]]\\n    },\\n    \"areas_8\": {\\n        \"name\": \"Bolton\",\\n        \"Postcode\": \"BL\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,600\"], [\"Labrador Retriever\", \"1,900\"], [\"Jack Russell Terrier\", \"1,600\"], [\"Border Collie\", \"1,100\"], [\"Shih Tzu\", \"1,100\"]]\\n    },\\n    \"areas_9\": {\\n        \"name\": \"Brighton\",\\n        \"Postcode\": \"BN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,800\"], [\"Jack Russell Terrier\", \"4,900\"], [\"Staffordshire Bull Terrier\", \"3,900\"], [\"Border Collie\", \"2,800\"], [\"Cocker Spaniel\", \"2,500\"]]\\n    },\\n    \"areas_7\": {\\n        \"name\": \"Bournemouth\",\\n        \"Postcode\": \"BH\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,700\"], [\"Jack Russell Terrier\", \"3,500\"], [\"Staffordshire Bull Terrier\", \"2,600\"], [\"Cocker Spaniel\", \"2,000\"], [\"Border Collie\", \"1,900\"]]\\n    },\\n    \"areas_121\": {\\n        \"name\": \"Northern Ireland\",\\n        \"Postcode\": \"BT\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"20,800\"], [\"Labrador Retriever\", \"20,700\"], [\"Yorkshire Terrier\", \"11,800\"], [\"Border Collie\", \"10,800\"], [\"Shih Tzu\", \"9,100\"]]\\n    },\\n    \"areas_10\": {\\n        \"name\": \"Bromley\",\\n        \"Postcode\": \"BR\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,900\"], [\"Labrador Retriever\", \"1,500\"], [\"Jack Russell Terrier\", \"1,200\"], [\"German Shepherd\", \"1,000\"], [\"Cocker Spaniel\", \"700\"]]\\n    },\\n    \"areas_11\": {\\n        \"name\": \"Bristol\",\\n        \"Postcode\": \"BS\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"7,100\"], [\"Labrador Retriever\", \"6,800\"], [\"Staffordshire Bull Terrier\", \"5,200\"], [\"Cocker Spaniel\", \"3,400\"], [\"Border Collie\", \"3,300\"]]\\n    },\\n    \"areas_75\": {\\n        \"name\": \"Oldham\",\\n        \"Postcode\": \"OL\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,700\"], [\"Jack Russell Terrier\", \"1,900\"], [\"Labrador Retriever\", \"1,900\"], [\"Border Collie\", \"1,400\"], [\"Yorkshire Terrier\", \"1,200\"]]\\n    },\\n    \"areas_76\": {\\n        \"name\": \"Oxford\",\\n        \"Postcode\": \"OX\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,300\"], [\"Jack Russell Terrier\", \"4,100\"], [\"Cocker Spaniel\", \"2,700\"], [\"Staffordshire Bull Terrier\", \"2,500\"], [\"Border Collie\", \"2,100\"]]\\n    },\\n    \"areas_48\": {\\n        \"name\": \"Halifax\",\\n        \"Postcode\": \"HX\",\\n        \"topFive\": [[\"Greyhound\", \"1,300\"], [\"Labrador Retriever\", \"1,000\"], [\"Lurcher\", \"1,000\"], [\"Jack Russell Terrier\", \"900\"], [\"Staffordshire Bull Terrier\", \"800\"]]\\n    },\\n    \"areas_45\": {\\n        \"name\": \"Hereford\",\\n        \"Postcode\": \"HR\",\\n        \"topFive\": [[\"Labrador Retriever\", \"3,000\"], [\"Jack Russell Terrier\", \"2,200\"], [\"Border Collie\", \"1,400\"], [\"Cocker Spaniel\", \"1,300\"], [\"English Springer Spaniel\", \"1,000\"]]\\n    },\\n    \"areas_46\": {\\n        \"name\": \"Outer Hebrides\",\\n        \"Postcode\": \"HS\",\\n        \"topFive\": [[\"Labrador Retriever\", \"96\"], [\"Border Collie\", \"89\"], [\"Cocker Spaniel\", \"30\"], [\"Jack Russell Terrier\", \"29\"], [\"German Shepherd\", \"25\"]]\\n    },\\n    \"areas_44\": {\\n        \"name\": \"Hemel Hempstead\",\\n        \"Postcode\": \"HP\",\\n        \"topFive\": [[\"Labrador Retriever\", \"5,000\"], [\"Jack Russell Terrier\", \"3,100\"], [\"Staffordshire Bull Terrier\", \"2,400\"], [\"Cocker Spaniel\", \"2,200\"], [\"Border Collie\", \"1,500\"]]\\n    },\\n    \"areas_47\": {\\n        \"name\": \"Hull\",\\n        \"Postcode\": \"HU\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,600\"], [\"Jack Russell Terrier\", \"3,400\"], [\"Staffordshire Bull Terrier\", \"3,100\"], [\"Cocker Spaniel\", \"1,800\"], [\"German Shepherd\", \"1,700\"]]\\n    },\\n    \"areas_41\": {\\n        \"name\": \"Harrow\",\\n        \"Postcode\": \"HA\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,200\"], [\"Labrador Retriever\", \"800\"], [\"Jack Russell Terrier\", \"700\"], [\"German Shepherd\", \"500\"], [\"Yorkshire Terrier\", \"400\"]]\\n    },\\n    \"areas_43\": {\\n        \"name\": \"Harrogate\",\\n        \"Postcode\": \"HG\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,000\"], [\"Cocker Spaniel\", \"900\"], [\"Jack Russell Terrier\", \"900\"], [\"Border Collie\", \"700\"], [\"Border Terrier\", \"400\"]]\\n    },\\n    \"areas_42\": {\\n        \"name\": \"Huddersfield\",\\n        \"Postcode\": \"HD\",\\n        \"topFive\": [[\"Labrador Retriever\", \"1,500\"], [\"Jack Russell Terrier\", \"1,400\"], [\"Staffordshire Bull Terrier\", \"1,100\"], [\"Border Collie\", \"1,000\"], [\"Cocker Spaniel\", \"800\"]]\\n    },\\n    \"areas_109\": {\\n        \"name\": \"Southall\",\\n        \"Postcode\": \"UB\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,000\"], [\"Jack Russell Terrier\", \"1,000\"], [\"Labrador Retriever\", \"800\"], [\"German Shepherd\", \"700\"], [\"Yorkshire Terrier\", \"500\"]]\\n    },\\n    \"areas_71\": {\\n        \"name\": \"Northampton\",\\n        \"Postcode\": \"NN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,700\"], [\"Jack Russell Terrier\", \"4,800\"], [\"Staffordshire Bull Terrier\", \"3,900\"], [\"Cocker Spaniel\", \"3,300\"], [\"Border Collie\", \"2,900\"]]\\n    },\\n    \"areas_69\": {\\n        \"name\": \"Newcastle upon Tyne\",\\n        \"Postcode\": \"NE\",\\n        \"topFive\": [[\"Labrador Retriever\", \"9,800\"], [\"Staffordshire Bull Terrier\", \"7,200\"], [\"Jack Russell Terrier\", \"7,000\"], [\"Cocker Spaniel\", \"4,400\"], [\"Border Collie\", \"4,000\"]]\\n    },\\n    \"areas_70\": {\\n        \"name\": \"Nottingham\",\\n        \"Postcode\": \"NG\",\\n        \"topFive\": [[\"Labrador Retriever\", \"9,800\"], [\"Staffordshire Bull Terrier\", \"9,800\"], [\"Jack Russell Terrier\", \"7,400\"], [\"Cocker Spaniel\", \"4,200\"], [\"Border Collie\", \"4,000\"]]\\n    },\\n    \"areas_72\": {\\n        \"name\": \"Newport\",\\n        \"Postcode\": \"NP\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"4,900\"], [\"Labrador Retriever\", \"4,400\"], [\"Staffordshire Bull Terrier\", \"3,400\"], [\"Border Collie\", \"2,900\"], [\"Cocker Spaniel\", \"1,800\"]]\\n    },\\n    \"areas_73\": {\\n        \"name\": \"Norwich\",\\n        \"Postcode\": \"NR\",\\n        \"topFive\": [[\"Labrador Retriever\", \"10,000\"], [\"Jack Russell Terrier\", \"3,800\"], [\"Staffordshire Bull Terrier\", \"3,600\"], [\"Cocker Spaniel\", \"3,500\"], [\"Border Collie\", \"2,700\"]]\\n    },\\n    \"areas_74\": {\\n        \"name\": \"North West London\",\\n        \"Postcode\": \"NW\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"1,300\"], [\"Jack Russell Terrier\", \"700\"], [\"Labrador Retriever\", \"700\"], [\"Yorkshire Terrier\", \"400\"], [\"Cocker Spaniel\", \"400\"]]\\n    },\\n    \"areas_108\": {\\n        \"name\": \"Twickenham\",\\n        \"Postcode\": \"TW\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"2,100\"], [\"Labrador Retriever\", \"1,700\"], [\"Jack Russell Terrier\", \"1,600\"], [\"Cocker Spaniel\", \"900\"], [\"German Shepherd\", \"700\"]]\\n    },\\n    \"areas_106\": {\\n        \"name\": \"Truro\",\\n        \"Postcode\": \"TR\",\\n        \"topFive\": [[\"Jack Russell Terrier\", \"4,100\"], [\"Labrador Retriever\", \"2,900\"], [\"Border Collie\", \"2,000\"], [\"Cocker Spaniel\", \"1,600\"], [\"Staffordshire Bull Terrier\", \"1,600\"]]\\n    },\\n    \"areas_107\": {\\n        \"name\": \"Cleveland\",\\n        \"Postcode\": \"TS\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,800\"], [\"Staffordshire Bull Terrier\", \"4,700\"], [\"Jack Russell Terrier\", \"3,900\"], [\"Yorkshire Terrier\", \"2,700\"], [\"Cocker Spaniel\", \"2,500\"]]\\n    },\\n    \"areas_105\": {\\n        \"name\": \"Torquay\",\\n        \"Postcode\": \"TQ\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,900\"], [\"Jack Russell Terrier\", \"2,600\"], [\"Border Collie\", \"1,900\"], [\"Staffordshire Bull Terrier\", \"1,300\"], [\"English Springer Spaniel\", \"1,300\"]]\\n    },\\n    \"areas_104\": {\\n        \"name\": \"Tonbridge\",\\n        \"Postcode\": \"TN\",\\n        \"topFive\": [[\"Labrador Retriever\", \"8,900\"], [\"Jack Russell Terrier\", \"6,200\"], [\"Staffordshire Bull Terrier\", \"4,500\"], [\"Cocker Spaniel\", \"3,300\"], [\"Border Collie\", \"3,200\"]]\\n    },\\n    \"areas_103\": {\\n        \"name\": \"Telford\",\\n        \"Postcode\": \"TF\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,400\"], [\"Staffordshire Bull Terrier\", \"2,200\"], [\"Jack Russell Terrier\", \"1,900\"], [\"Border Collie\", \"1,200\"], [\"Cocker Spaniel\", \"1,000\"]]\\n    },\\n    \"areas_102\": {\\n        \"name\": \"Galashiels\",\\n        \"Postcode\": \"TD\",\\n        \"topFive\": [[\"Labrador Retriever\", \"1,900\"], [\"Cocker Spaniel\", \"1,000\"], [\"Border Collie\", \"900\"], [\"Jack Russell Terrier\", \"600\"], [\"Border Terrier\", \"500\"]]\\n    },\\n    \"areas_101\": {\\n        \"name\": \"Taunton\",\\n        \"Postcode\": \"TA\",\\n        \"topFive\": [[\"Labrador Retriever\", \"4,500\"], [\"Jack Russell Terrier\", \"4,100\"], [\"Border Collie\", \"2,100\"], [\"Cocker Spaniel\", \"1,800\"], [\"Staffordshire Bull Terrier\", \"1,800\"]]\\n    },\\n    \"areas_1\": {\\n        \"name\": \"Aberdeen\",\\n        \"Postcode\": \"AB\",\\n        \"topFive\": [[\"Labrador Retriever\", \"6,100\"], [\"Cocker Spaniel\", \"3,200\"], [\"Border Collie\", \"2,800\"], [\"Jack Russell Terrier\", \"2,400\"], [\"Staffordshire Bull Terrier\", \"1,700\"]]\\n    },\\n    \"areas_31\": {\\n        \"name\": \"East London\",\\n        \"Postcode\": \"E\",\\n        \"topFive\": [[\"Staffordshire Bull Terrier\", \"4,400\"], [\"Jack Russell Terrier\", \"1,500\"], [\"Yorkshire Terrier\", \"1,200\"], [\"Labrador Retriever\", \"900\"], [\"German Shepherd\", \"700\"]]\\n    },\\n    \"areas_2\": {\\n        \"name\": \"St Albans\",\\n        \"Postcode\": \"AL\",\\n        \"topFive\": [[\"Labrador Retriever\", \"2,000\"], [\"Jack Russell Terrier\", \"1,100\"], [\"Staffordshire Bull Terrier\", \"1,100\"], [\"Cocker Spaniel\", \"800\"], [\"German Shepherd\", \"500\"]]\\n    }\\n\\n}';});\n\n","define('dogs_rollover',['lib/news_special/bootstrap', 'text!../data/map_data.json'], function (news, data) {\n    data  = JSON.parse(data);\n    function image_switcher(area_id) {\n        if (area_id in data) {\n            var image_to_update;\n            var name_to_update;\n            var number_to_update;\n\n            news.$('.area_headline').text(data[area_id].name);\n\n            for (var i = 0; i < 5; i++) {\n\n                switch (i) {\n                case 0:\n                    image_to_update = news.$('.top_dog_image');\n                    name_to_update = news.$('.top_breed_name');\n                    number_to_update = news.$('.top_breed_number');\n                    break;\n                case 1:\n                    image_to_update = news.$('.second_top_dog_image');\n                    name_to_update = news.$('.second_top_breed_name');\n                    number_to_update = news.$('.second_top_breed_number');\n                    break;\n                case 2:\n                    image_to_update = news.$('.third_top_dog_image');\n                    name_to_update = news.$('.third_top_breed_name');\n                    number_to_update = news.$('.third_top_breed_number');\n                    break;\n                case 3:\n                    image_to_update = news.$('.fourth_top_dog_image');\n                    name_to_update = news.$('.fourth_top_breed_name');\n                    number_to_update = news.$('.fourth_top_breed_number');\n                    break;\n                case 4:\n                    image_to_update = news.$('.fifth_top_dog_image');\n                    name_to_update = news.$('.fifth_top_breed_name');\n                    number_to_update = news.$('.fifth_top_breed_number');\n                    break;\n                }\n\n                name_to_update.text(data[area_id].topFive[i][0]);\n                number_to_update.text(data[area_id].topFive[i][1]);\n\n                switch (data[area_id].topFive[i][0]) {\n\n                case 'Labrador Retriever':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/labrador_48x48.png');\n                    break;\n                case 'Staffordshire Bull Terrier':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/staffordshire_bull_terrier_48x48.png');\n                    break;\n                case 'Jack Russell Terrier':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/jack_russell_terrier_48x48.png');\n                    break;\n                case 'Border Collie':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/border_collie_48x48.png');\n                    break;\n                case 'Greyhound':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/greyhound_48x48.png');\n                    break;\n                case 'Cocker Spaniel':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/cocker_spaniel_48x48.png');\n                    break;\n                case 'Lhasa Apso':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/lhasa_apso_48x48.png');\n                    break;\n                case 'Shih Tzu':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/shih_tzu_48x48.png');\n                    break;\n                case 'Yorkshire Terrier':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/yorkshire_terrier_48x48.png');\n                    break;\n                case 'Lurcher':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/lurcher_48x48.png');\n                    break;\n                case 'English Springer Spaniel':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/english_springer_spaniel_48x48.png');\n                    break;\n                case 'Chihuahua':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/chihuahua_48x48.png');\n                    break;\n                case 'German Shepherd':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/german_shepherd_48x48.png');\n                    break;\n                case 'Golden Retriever':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/golden_retriever_48x48.png');\n                    break;\n                case 'West Highland White Terrier':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/west_highland_white_terrier_48x48.png');\n                    break;\n                case 'Border Terrier':\n                    image_to_update.attr('src', 'img/responsive/48x48_images_transparent/border_terrier_48x48.png');\n                    break;\n\n\n                }\n            }\n        }\n    }\n\n    news.$('#stroke_group g').on('mouseover', function (e) {\n\n        var map_wrapper_width = 624;\n        var halfway_point = map_wrapper_width / 2;\n\n        if (e.pageX > halfway_point) {\n            pointer_on_right = true;\n        } else {\n            pointer_on_right = false;\n        }\n\n        if (pointer_on_right) {\n            news.$('#dogs--map__rollover__wrapper').removeClass('pointer_on_left').addClass('pointer_on_right');\n        } else {\n            news.$('#dogs--map__rollover__wrapper').removeClass('pointer_on_right').addClass('pointer_on_left');\n        }\n\n        var id = news.$(this).attr('id');\n        image_switcher(id);\n\n        news.$(this).css('opacity', 0.8);\n    });\n\n    news.$('#stroke_group g').on('mousemove', function (e) {\n\n        var mouseX, mouseY, left, topOffset;\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n\n        if (pointer_on_right) {\n            left = mouseX -  340;\n        } else {\n            left = mouseX - 10;\n        }\n\n        topOffset = mouseY - 20;\n\n        news.$('#dogs--map__rollover__wrapper').css({\n            top: topOffset,\n            left: left\n        });\n        news.$('#dogs--map__rollover__wrapper').show();\n    });\n    news.$('#stroke_group g').on('mouseout', function (e) {\n        news.$('#dogs--map__rollover__wrapper').hide();\n        news.$(this).css('opacity', 1);\n    });\n});\n","define('dogs_map',['lib/news_special/bootstrap', 'text!../data/map_data.json', 'dogs_rollover'], function (news, data, dogsRollover) {\n\t\n    data = JSON.parse(data);\n    var pointer_on_right = false;\n\tvar svgSupported = (!!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect) ? true : false;\n\n\tif (!svgSupported) {\n\t\treturn;\n\t}\n\n\tnews.$('#dogs--map--static').addClass('hidden');\n\tnews.$('#dogs--map--svg').removeClass('hidden');\n    function add_colours_to_map(area_id) {\n\n        if (area_id in data) {\n            switch (data[area_id].topFive[0][0]) {\n            case 'Labrador Retriever':\n                news.$('#' + area_id + ', #london_areas #' + area_id).attr('style', 'fill:#007F7F');\n                break;\n            case 'Staffordshire Bull Terrier':\n                news.$('#' + area_id + ', #london_areas #' + area_id).attr('style', 'fill:#CC0000');\n                break;\n            case 'Jack Russell Terrier':\n                news.$('#' + area_id).attr('style', 'fill:#FF7900');\n                break;\n            case 'Border Collie':\n                news.$('#' + area_id).attr('style', 'fill:#689C00');\n                break;\n            case 'Greyhound':\n                news.$('#' + area_id).attr('style', 'fill:#80004D');\n                break;\n            }\n        }\n    }\n\n    news.$('#stroke_group g').each(function () {\n        var id = news.$(this).attr('id');\n        add_colours_to_map(id);\n    });\n});\n","define('app',['lib/news_special/bootstrap', 'dogs_map'], function (news, dogsMap) {\n    news.sendMessageToremoveLoadingImage();\n});\n"]}