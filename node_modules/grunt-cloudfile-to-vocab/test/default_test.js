'use strict';

var grunt              = require('grunt'),
    cloudfile_to_vocab = require('../tasks/lib/cloudfile_to_vocab')(),
    http               = require('http'),
    fs                 = require('fs'),
    defaultTimeout     = 2000;

exports.cloudfile_to_vocab = {
    
    setUp: function (done) {
        done();
    },

    'make output directory': function (test) {
        test.expect(2);
        
        cloudfile_to_vocab.makeOutputDirectory('test/output/make_output_directory/first/test');
        cloudfile_to_vocab.makeOutputDirectory('./test/output/make_output_directory/second/test');
        
        setTimeout(function () {
            test.ok(fs.existsSync('test/output/make_output_directory/first/test'), 'The path "test/output/make_output_directory/first/test/" should be created');
            test.ok(fs.existsSync('./test/output/make_output_directory/second/test'), 'The path "test/output/make_output_directory/second/test/" should be created');
            test.done();
        }, defaultTimeout);
    },

    'no options default': function (test) {
        test.expect(1);
        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'Please provide options to process',
                'Must throw a warning if no options provided'
            );
        };
        test.throws(
            function() {
                cloudfile_to_vocab.process();
            }, 
            Error,
            'Must error if no options provided'
        );
        test.done();
    },

    'empty options for processing csv': function (test) {
        test.expect(2);
        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'Please provide a document_url in the options',
                'Must throw a warning if no document_url option provided'
            );
        };
        test.throws(
            function() {
                cloudfile_to_vocab.process({
                    whitelisted_services: ['english', 'mundo']
                });
            }, 
            Error,
            'Must error if no document_url option provided'
        );
        test.done();
    },

    'bad options for processing csv': function (test) {
        test.expect(2);
        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'To access Google spreadsheets provide a google_spreadsheet_id property in the options instead.',
                'Must throw a warning if a google URL is provided in the document_url option'
            );
        };
        test.throws(
            function() {
                cloudfile_to_vocab.process({
                    document_url: 'https://google.com/id=123',
                    whitelisted_services: ['english', 'mundo']
                });
            }, 
            Error,
            'Must error if a google URL is provided in the document_url option'
        );
        test.done();
    },

    'no whitelisted services provided should raise error': function (test) {
        test.expect(2);
        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'Please provide a whitelist of acceptable language names (as the whitelisted_services parameter).',
                'Must throw a warning if no whitelisted_services option is provided'
            );
        };
        test.throws(
            function() {
                cloudfile_to_vocab.process({
                    document_url:         'http://127.0.0.1:8124',
                    output_directory:     'test/output/fetches_cloud_doc'
                });
            }, 
            Error,
            'Must error if no whitelisted_services option is provided'
        );
        test.done();
    },

    'languages that have not been whitelisted should raise error': function (test) {
        test.expect(2);

        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'mundo is not a valid language name! Check your column headers!',
                'Must throw a specific warning if language is passed that is not whitelisted'
            );
        };
        test.throws(
            function() {
                var data = [
                    ["null",   "english",    "mundo"],
                    ["ignore", "admin text", "admin text"],
                    ["hello",  "hi",         "ola"],
                    ["bye",    "seeya",      "byebye"]
                ];

                cloudfile_to_vocab.outputDirectory = 'test/output/renders_json';
                cloudfile_to_vocab.data            = data;
                cloudfile_to_vocab.whitelisted     = ['english'];
                cloudfile_to_vocab.makeVocabs();
            }, 
            Error,
            'Must throw a warning if language is passed that is not whitelisted'
        );
        test.done();
    },

    'fetches cloud doc': function (test) {
        test.expect(1);
        
        http.createServer(function (request, response) {
            response.writeHead(200, {'Content-Type': 'text/plain'});
            response.end(grunt.file.read('test/expected/vocab_fixture.csv'));
        }).listen(8124);

        cloudfile_to_vocab.process({
            document_url:     'http://127.0.0.1:8124',
            output_directory: 'test/output/fetches_cloud_doc',
            whitelisted_services: ['english', 'mundo']
        });

        setTimeout(function() {
            test.deepEqual(
                cloudfile_to_vocab.data,
                [
                    ["null",   "english",    "mundo"],
                    ["ignore", "admin text", "admin text"],
                    ["hello",  "hi",         "ola"],
                    ["bye",    "seeya",      "byebye"]
                ], 
                'should download and store a copy of the cloud file'
            );
            test.done();
        }, defaultTimeout);
    },

    'converts csv to array': function (test) {

        test.expect(1);
        var callback = function (converted_to_array) {
            test.deepEqual(
                converted_to_array,
                [
                    ["null",   "english",    "mundo"],
                    ["ignore", "admin text", "admin text"],
                    ["hello",  "hi",         "ola"],
                    ["bye",    "seeya",      "byebye"]
                ],
                "should convert a csv file to a deep array"
            );
            test.done();
        };
        cloudfile_to_vocab.convertCsvToArray(
            grunt.file.read('test/expected/vocab_fixture.csv'),
            callback
        );
        setTimeout(function() {
            test.done();
        }, defaultTimeout);

    },

    'renders json': function (test) {

        test.expect(2);

        var data = [
            ["null",   "english",    "mundo"],
            ["ignore", "admin text", "admin text"],
            ["hello",  "hi",         "ola"],
            ["bye",    "seeya",      "byebye"]
        ];

        cloudfile_to_vocab.outputDirectory = 'test/output/renders_json';
        cloudfile_to_vocab.data            = data;
        cloudfile_to_vocab.makeVocabs();

        var actual_1   = JSON.parse(grunt.file.read('test/output/renders_json/english.json')),
            expected_1 = JSON.parse(grunt.file.read('test/expected/renders_json/english.json'));
        test.deepEqual(
            actual_1,
            expected_1, 
            'should create a english vocab file'
        );

        var actual_2   = JSON.parse(grunt.file.read('test/output/renders_json/mundo.json')),
            expected_2 = JSON.parse(grunt.file.read('test/expected/renders_json/mundo.json'));
        test.deepEqual(
            actual_2, 
            expected_2, 
            'should create a mundo vocab file'
        );

        test.done();
    },
    
    'bad options for google': function (test) {
        test.expect(2);
        cloudfile_to_vocab.consoleWarnFacade = function (message) {
            test.equal(
                message,
                'Google spreadsheets require username and password values in the options',
                'should warn if a google URL is used without a username and password'
            );
        };
        test.throws(
            function() {
                cloudfile_to_vocab.process({
                    google_spreadsheet_id: '123456789',
                    whitelisted_services: ['english', 'mundo']
                });
            }, 
            Error,
            'should error if a google URL is used without a username and password'
        );
        test.done();
    },

    'using with google': function (test) {
        test.expect(3);

        var spreadsheet_id      = '123456789',
            username            = 'tom',
            password            = 'super secret',
            fake_service        = {
                create: function(opts) {
                    test.equal(opts.spreadsheetId, spreadsheet_id, 'should pass through the correct spreadsheet ID');
                    test.equal(opts.username,      username,       'should pass through the correct username');
                    test.equal(opts.password,      password,       'should pass through the correct password');
                    test.done();
                }
            };

        cloudfile_to_vocab.processGoogleSpreadsheet({
            google_spreadsheet_id:           spreadsheet_id,
            username:                        username,
            password:                        password,
            fake_google_spreadsheet_service: fake_service
        });

        // Called if spreadsheetCallback never gets fired
        setTimeout(function() {
            test.done();
        }, defaultTimeout);
    },

    'convert json to array': function (test) {
        test.expect(1);
        test.deepEqual(
            cloudfile_to_vocab.convertGoogleSpreadSheetDataToArray({
                '1': {
                    '2': 'english',
                    '3': 'Persian',
                    '4': 'Portuguese',
                    '5': 'Vietnamese',
                    '6': 'arabic_1024',
                    '7': 'Russian',
                    '8': 'Ukrainian',
                    '9': 'Azeri',
                    '10': 'mundo'
                },
                '2': {
                    '1': 'ignore',
                    '2': 'Your Name and Contact Number:',
                    '3': 'Hamid Reza',
                    '4': 'Paula Adamo - 42863',
                    '5': 'Ly Truong - 40531',
                    '6': 'Mustafa 50222',
                    '7': 'Famil Ismailov 42553&#44; Panel Bandakov',
                    '8': 'Irena Taranyuk 42544',
                    '9': 'Leyla Najafova 42540',
                    '10': 'Margarita Rodríguez 41590&#44; Max Seitz'
                }
            }),
            [
                ['',       'english',                       'Persian',    'Portuguese',          'Vietnamese',        'arabic_1024',   'Russian',                                  'Ukrainian',            'Azeri',                'mundo'],
                ['ignore', 'Your Name and Contact Number:', 'Hamid Reza', 'Paula Adamo - 42863', 'Ly Truong - 40531', 'Mustafa 50222', 'Famil Ismailov 42553&#44; Panel Bandakov', 'Irena Taranyuk 42544', 'Leyla Najafova 42540', 'Margarita Rodríguez 41590&#44; Max Seitz']
            ],
            'should transform the json into an array'
        );
        test.done();
    },

    'highest named key value': function (test) {
        test.expect(1);
        test.equal(
            cloudfile_to_vocab.getHighestNamedKeyValue({
                '1': 'foo',
                '8': 'bar',
                '3': 'lar',
                '5': 'car'
            }),
            8,
            'should return the key value with the highest number'
        );
        test.done();
    },

    'irregular spreadsheet content': function (test) {
        test.expect(1);
        test.deepEqual(
            cloudfile_to_vocab.convertGoogleSpreadSheetDataToArray({
                '1': {
                    '2': 'english',
                    '3': 'Persian',
                    '4': 'Portuguese',
                    '5': 'Vietnamese',
                    '6': 'arabic_1024',
                    '7': 'Russian',
                    '8': 'Ukrainian',
                    '9': 'Azeri',
                    '10': 'mundo'
                },
                '2': {
                    '1': 'ignore',
                    '2': 'Your Name and Contact Number:',
                    '4': 'Paula Adamo - 42863',
                    '6': 'Mustafa 50222',
                    '9': 'Leyla Najafova 42540',
                }
            }),
            [
                ['',       'english',                       'Persian', 'Portuguese',          'Vietnamese', 'arabic_1024',   'Russian', 'Ukrainian', 'Azeri',                'mundo'],
                ['ignore', 'Your Name and Contact Number:', '',        'Paula Adamo - 42863', '',           'Mustafa 50222', '',        '',          'Leyla Najafova 42540', '']
            ],
            'should transform the json into an array'
        );
        test.done();
    }
};